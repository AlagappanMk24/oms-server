// <auto-generated />
using System;
using API.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "USD",
                            Name = "US Dollar",
                            Symbol = "$"
                        },
                        new
                        {
                            Id = 2,
                            Code = "EUR",
                            Name = "Euro",
                            Symbol = "€"
                        },
                        new
                        {
                            Id = 3,
                            Code = "JPY",
                            Name = "Japanese Yen",
                            Symbol = "¥"
                        },
                        new
                        {
                            Id = 4,
                            Code = "GBP",
                            Name = "British Pound",
                            Symbol = "£"
                        },
                        new
                        {
                            Id = 5,
                            Code = "AUD",
                            Name = "Australian Dollar",
                            Symbol = "A$"
                        },
                        new
                        {
                            Id = 6,
                            Code = "CAD",
                            Name = "Canadian Dollar",
                            Symbol = "C$"
                        },
                        new
                        {
                            Id = 7,
                            Code = "CHF",
                            Name = "Swiss Franc",
                            Symbol = "CHF"
                        },
                        new
                        {
                            Id = 8,
                            Code = "CNY",
                            Name = "Chinese Yuan",
                            Symbol = "¥"
                        },
                        new
                        {
                            Id = 9,
                            Code = "SEK",
                            Name = "Swedish Krona",
                            Symbol = "kr"
                        },
                        new
                        {
                            Id = 10,
                            Code = "NZD",
                            Name = "New Zealand Dollar",
                            Symbol = "NZ$"
                        },
                        new
                        {
                            Id = 11,
                            Code = "INR",
                            Name = "Indian Rupee",
                            Symbol = "₹"
                        });
                });

            modelBuilder.Entity("API.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("API.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InvoiceDue")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDue")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("API.Entities.InvoiceAttachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceAttachments");
                });

            modelBuilder.Entity("API.Entities.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("API.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimezoneId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TimezoneId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Business St",
                            City = "New York",
                            CompanyName = "KLT InfoTech",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2855),
                            CurrencyId = 1,
                            Email = "admin@kltinfotech_us.com",
                            Logo = "logo_us.png",
                            Phone = "+1-212-555-1234",
                            PostalCode = "10001",
                            State = "NY",
                            TimezoneId = 1,
                            UpdatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2865)
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Market Rd",
                            City = "Berlin",
                            CompanyName = "KLT InfoTech",
                            Country = "Germany",
                            CreatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2869),
                            CurrencyId = 2,
                            Email = "admin@kltinfotech_gm.com",
                            Logo = "logo_de.png",
                            Phone = "+49-30-555-1234",
                            PostalCode = "10115",
                            State = "Berlin",
                            TimezoneId = 3,
                            UpdatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2869)
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Sakura Ave",
                            City = "Tokyo",
                            CompanyName = "KLT InfoTech",
                            Country = "Japan",
                            CreatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2872),
                            CurrencyId = 3,
                            Email = "admin@kltinfotech_jn.com",
                            Logo = "logo_jp.png",
                            Phone = "+81-3-555-1234",
                            PostalCode = "100-0001",
                            State = "Tokyo",
                            TimezoneId = 7,
                            UpdatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2872)
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 King St",
                            City = "London",
                            CompanyName = "KLT InfoTech",
                            Country = "UK",
                            CreatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2875),
                            CurrencyId = 4,
                            Email = "admin@kltinfotech_uk.com",
                            Logo = "logo_gb.png",
                            Phone = "+44-20-555-1234",
                            PostalCode = "SW1A 1AA",
                            State = "London",
                            TimezoneId = 4,
                            UpdatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2875)
                        },
                        new
                        {
                            Id = 5,
                            Address = "654 Queen St",
                            City = "Sydney",
                            CompanyName = "KLT InfoTech",
                            Country = "Australia",
                            CreatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2878),
                            CurrencyId = 5,
                            Email = "admin@kltinfotech_as.com",
                            Logo = "logo_au.png",
                            Phone = "+61-2-555-1234",
                            PostalCode = "2000",
                            State = "NSW",
                            TimezoneId = 5,
                            UpdatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2878)
                        },
                        new
                        {
                            Id = 6,
                            Address = "123 Maple St",
                            City = "Toronto",
                            CompanyName = "KLT InfoTech",
                            Country = "Canada",
                            CreatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2880),
                            CurrencyId = 6,
                            Email = "admin@kltinfotech_cn.com",
                            Logo = "logo_ca.png",
                            Phone = "+1-416-555-1234",
                            PostalCode = "M5A 1A1",
                            State = "ON",
                            TimezoneId = 9,
                            UpdatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2881)
                        },
                        new
                        {
                            Id = 7,
                            Address = "456 Elm St",
                            City = "Zurich",
                            CompanyName = "KLT InfoTech",
                            Country = "Switzerland",
                            CreatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2883),
                            CurrencyId = 7,
                            Email = "admin@kltinfotech_sw.com",
                            Logo = "logo_ch.png",
                            Phone = "+41-44-555-1234",
                            PostalCode = "8001",
                            State = "Zurich",
                            TimezoneId = 4,
                            UpdatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2884)
                        },
                        new
                        {
                            Id = 8,
                            Address = "789 Bamboo Rd",
                            City = "Beijing",
                            CompanyName = "KLT InfoTech",
                            Country = "China",
                            CreatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2887),
                            CurrencyId = 8,
                            Email = "admin@kltinfotech_ch.com",
                            Logo = "logo_cn.png",
                            Phone = "+86-10-555-1234",
                            PostalCode = "100000",
                            State = "Beijing",
                            TimezoneId = 10,
                            UpdatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2887)
                        },
                        new
                        {
                            Id = 9,
                            Address = "321 Fjall Rd",
                            City = "Stockholm",
                            CompanyName = "KLT InfoTech",
                            Country = "Sweden",
                            CreatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2889),
                            CurrencyId = 9,
                            Email = "admin@kltinfotech_sw.com",
                            Logo = "logo_se.png",
                            Phone = "+46-8-555-1234",
                            PostalCode = "111 22",
                            State = "Stockholm",
                            TimezoneId = 3,
                            UpdatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2890)
                        },
                        new
                        {
                            Id = 10,
                            Address = "654 Kiwi St",
                            City = "Auckland",
                            CompanyName = "KLT InfoTech",
                            Country = "New Zealand",
                            CreatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2892),
                            CurrencyId = 10,
                            Email = "admin@kltinfotech_nz.com",
                            Logo = "logo_nz.png",
                            Phone = "+64-9-555-1234",
                            PostalCode = "1010",
                            State = "Auckland",
                            TimezoneId = 5,
                            UpdatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2893)
                        },
                        new
                        {
                            Id = 11,
                            Address = "123 Curry Rd",
                            City = "Mumbai",
                            CompanyName = "KLT InfoTech",
                            Country = "India",
                            CreatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2895),
                            CurrencyId = 11,
                            Email = "admin@kltinfotech_in.com",
                            Logo = "logo_in.png",
                            Phone = "+91-22-555-1234",
                            PostalCode = "400001",
                            State = "MH",
                            TimezoneId = 6,
                            UpdatedAt = new DateTime(2024, 9, 6, 19, 39, 26, 947, DateTimeKind.Local).AddTicks(2896)
                        });
                });

            modelBuilder.Entity("API.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("API.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("API.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInStore")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("API.Entities.Timezone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtcOffset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtcOffsetString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Timezones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "PST",
                            Name = "Pacific Standard Time",
                            UtcOffset = "-08:00",
                            UtcOffsetString = "-08:00"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "EST",
                            Name = "Eastern Standard Time",
                            UtcOffset = "-05:00",
                            UtcOffsetString = "-05:00"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "CET",
                            Name = "Central European Time",
                            UtcOffset = "+01:00",
                            UtcOffsetString = "+01:00"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "GMT",
                            Name = "Greenwich Mean Time",
                            UtcOffset = "+00:00",
                            UtcOffsetString = "+00:00"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "AEST",
                            Name = "Australian Eastern Standard Time",
                            UtcOffset = "+10:00",
                            UtcOffsetString = "+10:00"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "IST",
                            Name = "India Standard Time",
                            UtcOffset = "+05:30",
                            UtcOffsetString = "+05:30"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "JST",
                            Name = "Japan Standard Time",
                            UtcOffset = "+09:00",
                            UtcOffsetString = "+09:00"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "BRT",
                            Name = "Brazilia Time",
                            UtcOffset = "-03:00",
                            UtcOffsetString = "-03:00"
                        },
                        new
                        {
                            Id = 9,
                            Abbreviation = "MST",
                            Name = "Mountain Standard Time",
                            UtcOffset = "-07:00",
                            UtcOffsetString = "-07:00"
                        },
                        new
                        {
                            Id = 10,
                            Abbreviation = "SGT",
                            Name = "Singapore Time",
                            UtcOffset = "+08:00",
                            UtcOffsetString = "+08:00"
                        });
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("AuthProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalUser")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entities.Customer", b =>
                {
                    b.OwnsOne("API.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("int");

                            b1.Property<string>("Address1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address1");

                            b1.Property<string>("Address2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address2");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Country");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("State");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.Invoice", b =>
                {
                    b.HasOne("API.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("API.Entities.InvoiceAttachments", b =>
                {
                    b.HasOne("API.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceAttachments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("API.Entities.InvoiceItem", b =>
                {
                    b.HasOne("API.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("API.Entities.Location", b =>
                {
                    b.HasOne("API.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Timezone", "Timezone")
                        .WithMany()
                        .HasForeignKey("TimezoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Timezone");
                });

            modelBuilder.Entity("API.Entities.Order", b =>
                {
                    b.HasOne("API.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Invoice", "Invoice")
                        .WithOne("Order")
                        .HasForeignKey("API.Entities.Order", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("API.Entities.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<string>("Address1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Address2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("API.Entities.Address", "ShippingAddress", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<string>("Address1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Address2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("BillingAddress")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("ShippingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.OrderItem", b =>
                {
                    b.HasOne("API.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Entities.Customer", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("API.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceAttachments");

                    b.Navigation("InvoiceItems");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("API.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("API.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
